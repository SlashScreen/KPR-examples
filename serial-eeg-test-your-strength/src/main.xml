<?xml version="1.0" encoding="utf-8"?>
<program xmlns="http://www.kinoma.com/kpr/1">
	<variable id="concent" value="20" /> 
        
	<texture id="iconTexture" small="./assets/brainwave_state.png"/>
	
 	<column id="HighStriker" left="0" bottom = "-150" right="0" anchor = "STRIKER">
	    <picture anchor = "BELL" name = "bell" left="0" height="110" right="0" url="'./assets/HighStriker_bell.png'">
	        <behavior>
                <method id="onLoaded" params="picture">
                    <![CDATA[
                        bellHeight = picture.height
                    ]]>
                </method>
            </behavior>
	        
	    </picture>

	    <container anchor = "SLIDER_RINGER" height = "1171">
		    <picture anchor = "SLIDER" name = "slider" height="1171" url="'./assets/HighStriker_slide.png'" >
		        <behavior>
	                <method id="onLoaded" params="picture">
	                    <![CDATA[
	                        sliderRange = picture.height
	                    ]]>
	                </method>
	            </behavior>
		    </picture>
		    <picture anchor = "RINGER" bottom = "0" name = "ringer" url="'./assets/ringer.png'"  >
		    	<behavior>
                    <method id="onSliderScrolled" params="ringer,data">
                        <![CDATA[
	                        
			                	this.startBottom = ringer.coordinates.bottom;
			                	this.endBottom = (data.bottom-bellHeight -baseHeight )*-1
			                	ringer.time = 0;
			                	ringer.duration = data.duration;
			                	ringer.start();
                        ]]>
                    </method>
                    <method id="onTimeChanged" params="ringer">
			            <![CDATA[
			                var ringerCoords = ringer.coordinates
			                if(state == WIN) {
			                    ringerCoords.bottom = tween(ringer.time,ringer.duration,this.startBottom,this.endBottom, "quadEaseIn")
			                } else {
			                    ringerCoords.bottom = tween(ringer.time,ringer.duration,this.startBottom,this.endBottom, "quadEaseInOut")
							}	                	
			            	ringer.coordinates = ringerCoords
			            ]]>
			        </method>
                </behavior>
    		</picture>
        </container>
		   
		    <picture anchor = "BASE" name = "base" height="219" url="'./assets/HighStriker_base.png'" >
		        <behavior>
	                <method id="onLoaded" params="picture">
	                    <![CDATA[
	                        baseHeight = picture.height
	                    ]]>
	                </method>
	            </behavior>
		        
		    </picture>
    	<behavior>
            <method id="onCreate" params="content">
		        <![CDATA[
		            this.lastAttention=0
		        ]]>
		    </method>
	        <method id="onAttentionChanged" params="striker,result">
	            <![CDATA[
	                var attention = Math.round(result.attention)
						if(attention >= 100 * difficulty ) result.attention = 100*difficulty
	                if(attention != this.lastAttention) {
						trace("Attention: " + result.attention + "%\n");
	                	this.startBottom = striker.coordinates.bottom;
	                	this.endBottom = result.attention / -100 * sliderRange 
	                	striker.time = 0;
	                	striker.duration = 660;
						application.distribute("onSliderScrolled", {bottom:this.endBottom, duration:striker.duration});
	                	striker.start();
	                }
					if(attention >= 100 * difficulty ) {
						state = WIN;
					} else {
	            		this.lastAttention = attention
					}
	                ]]>
	        </method>
	        <method id="onTimeChanged" params="striker">
	            <![CDATA[
	                var test = striker.coordinates
	                if(state == WIN) {
	                    test.bottom = tween(striker.time,striker.duration,this.startBottom,this.endBottom, "quadEaseIn")
	                } else {
	                    test.bottom = tween(striker.time,striker.duration,this.startBottom,this.endBottom, "quadEaseInOut")
					}	                	
	            	striker.coordinates = test
	            ]]>
	        </method>
	        <method id="onFinished" params="striker">
				<![CDATA[
					if(state == WIN) {
						striker.stop()
						var bellSound =  new Sound("./assets/bell.mp3")
	    				var cheerSound = new Sound("./assets/cheering.wav")
	    				var bellCheerSound = new Sound("./assets/bellCheer.mp3")
						bellCheerSound.play();
						var winMsg = new MessageWithObject("pins:/gumbell/brenda", {duration:250})
						striker.invoke(winMsg, Message.TEXT)
						application.distribute("onReset")
					}
				]]>
			</method>
	        
	    </behavior>
	    
	</column>
	
	<container id="maincont" top="0" left="0" bottom="0"
        right="0" skin="whiteskin"  active = "false">     
        <behavior>
            <method id="onTouchEnded" params="content, id, x, y, ticks">
                <![CDATA[
                    application.distribute("onReset")
                ]]>
            </method>
        </behavior> 
    	<content left="225" bottom="15" width = "80" height = "80" >
			<skin texture="iconTexture" x="0" y="0" width="80" height="80">
				<variants offset="80" names="NG,OK,SOSO"/>
			</skin>
	        <behavior>
				<method id="onSignalChange" params="content,params">
	                <![CDATA[
	                    if (params.hasOwnProperty('visible')) {
	                    	content.visible = params.visible;
	                    }
	                    if (params.hasOwnProperty('variant')) {
	                    	content.variant = params.variant;
	                    }
	                ]]>
	            </method>        	
	        </behavior>
    	</content>
	
    </container>
    <skin id="whiteskin" color="white">
        
    </skin>
    <picture id="Hammer" left="0" width = "170" height = "170" bottom="55" url="'./assets/mallet_allamerican2.png'" exclusiveTouch = "true">
        <behavior>
        <method id="onLoaded" params="picture">
                <![CDATA[
                    picture.origin = {x:20,y:picture.height-15}
                    picture.scale = {x:.85,y:.85}
                ]]>
            </method>
            <method id="hammerRot" params="picture,result">
                <![CDATA[
                	if(result.signalQuality<50){
                		picture.active = true
                	}
                	else{
                		picture.active = false
                	}
                	this.startRot = picture.rotation;
                	this.endRot = result.signalQuality/3-40
                	picture.time=0
                    picture.duration=150
                    picture.start();
                ]]>
            </method>
            <method id="onTouchEnded" params="picture, id, x, y, ticks">
                <![CDATA[
                	this.startRot= picture.rotation
                	this.endRot= 45
                    picture.time=0
                    picture.duration=200
                    picture.start();
                    picture.exclusiveTouch = false;
                    picture.active = false;
                    picture.container.active = true;
                    state = WHACK
                ]]>
            </method>
            <method id="onTimeChanged" params="picture">
                <![CDATA[
                    var hammerPos
                    hammerPos = tween(picture.time,picture.duration,this.startRot,this.endRot, "quadEaseInOut");
                    picture.rotation=hammerPos
                ]]>
            </method>
            <method id="onFinished" params="picture">
                <![CDATA[
                    if(state == WHACK) { // hammer just came down.
                    	picture.stop();
                    	var Whap =  new Sound("./assets/WHAP!.mp3")
                    	Whap.play();
                    	this.startRot = picture.rotation
                    	this.endRot = -120
                    	picture.time = 0
                    	picture.duration = 400
                    	sensorUtils.mdelay(100);
                    	picture.start();
                    	state = PLAYING
                    }
                ]]>
            </method>
            
        </behavior>
    </picture>
    

    <script>
        <![CDATA[
        	var appwin = new maincont
        	var PREPARING = 0
        	var WHACK = 1
        	var PLAYING = 2
        	var WIN = 3
	       	var state = PREPARING
        	var hammer = new Hammer
        	var striker = new HighStriker
        	var signalState = {};
        	var difficulty = 0.80
        	var sliderRange, baseHeight, bellHeight
        	
        	var buildUI = function() {
		       	state = PREPARING
        		appwin = new maincont
	        	striker = new HighStriker
	        	hammer = new Hammer
	        	appwin.add (striker);
	        	appwin.add (hammer);
	            application.add (appwin);

            }
            application.behavior = Behavior({
   				onLaunch: function(application) {
                	trace("Launched "+ application.id + "\n")
	                buildUI();
	                application.invoke(new MessageWithObject("pins:configure", {
	            		sensor: {
	                		require: "MindSetSerial",
	                		pins: {
	                        	eeg:{tx:31, rx:33} // rx not used, just avoids a warning
	                		}	
	                	},
	            		gumbell: {
	                		require: "Pinninator",
	                		pins: {
	                        	out:{pin:24} // back panel near a handy ground
	                		}	
	                	},
	                }
	            ), Message.TEXT);
			},

	onComplete: function(application, message) {
		trace("BLL configured.\n");
		application.invoke(new MessageWithObject("pins:/sensor/read?repeat=on&interval=50&callback=/gotPacket"));
	},
   
	onReset: function(application, message) {
		application.remove(application.first);
		buildUI();
   },
});

Handler.bind("/gotPacket", {
        onInvoke: function(handler, message) {
                var result = message.requestObject;
                for(p in result) {
                        switch (p) {
                case "signalQuality":
                		if (state===PREPARING){
                			application.distribute("hammerRot",{signalQuality:result.signalQuality})
                		}
                        if(result.signalQuality != 200) {
                    	signalState = {visible:true, variant:result.signalQuality < 47 ? OK : SOSO}
                   		application.distribute("onSignalChange", signalState);
                            var signalStrength = 200 - result.signalQuality;
                            //trace("Signal Strength: " + signalStrength/200*100 + "%\t");
                    } else {
                    	signalState = {visible:true, variant:NG}
                   		application.distribute("onSignalChange", signalState);
                		trace("Poor contact; please check the headset fit.\n")
                                        }
                    break;
                case "attention":
                	if(state===PLAYING){
                    	application.distribute("onAttentionChanged",{attention:result.attention})
                    }
                    break;
                case "meditation":
                    // Do something with this data in here
                    //trace("Meditation: " + result.meditation + "%");
                    break;
                case "error":
                        if(result.error) {
                            trace("Error: " + result.error + "\n");
                    }
                    break;
                default:
                    break;
            }
                }
        },

        onComplete: function(handler,message) {
                trace(message.requestObject + "\n");
        }
});
var tween = function(time,duration,start,end,easeType){
	if(easeType) {
		switch (easeType) {
	        case "quadEaseInOut":
	            var soFar = Math.quadEaseInOut(time/duration);
	            break;
	        case "quadEaseOut":
	            var soFar = Math.quadEaseOut(time/duration);
	            break;
	        case "quadEaseIn":
	            var soFar = Math.quadEaseIn(time/duration);
	            break;
	        case "bounceEaseInOut":
	            var soFar = Math.bounceEaseInOut(time/duration);
	            break;
	        case "quintEaseInOut":
	            var soFar = Math.quintEaseInOut(time/duration);
	            break;
	        case "quintEaseIn":
	            var soFar = Math.quintEaseIn(time/duration);
	            break;
	        default:
	            break;
	    }
	} else {
		var soFar = time/duration
	}
	var thisRot = (end-start)*soFar
	thisRot += start
	return thisRot
}

        ]]>
    </script>
</program>